# Sample of KiiThingSDK Embedded for GT202

GT202上でKiiThingSDKを実行するサンプルコードです。

## 使用方法

### 準備

始めに"GT202KITS デモソフトウェア操作手順書\_20141126.pdf"の2.3.2までを行いGT202をPCから操作するためのターミナルを立ち上げられるようにしてください。

次に"GT202KITS 開発環境セットアップ手順書\_20141126.pdf"の内容に従いスループットデモをビルド＆実行できる環境を整えてください。(4.2のWiFiDirectに関しては関係ないので不要です。)

### サンプルコードのビルド

準備がPDF資料通りに完了していれば"C:\Freescale\Freescale\_MQX\_4\_1\demo\throughput\_demo\custom"が作成されています。
そのcustomフォルダにKiiThingSDK-Embedded直下とgt202下のヘッダ、ソースファイルをコピーしてください。

IAR Embedded Workbench IDEでスループットデモのプロジェクト(gt202kits\_frdmk22f.eww)を開きコピーしたファイルをプロジェクトへ追加してください。
ただし、prv\_kii\_recv\_copy.cとprv\_kii\_recv\_zero\_copy.cはご使用されるmqxの定義するZERO\_COPYマクロ定数に従いどちらか一方だけを追加する必要があるので注意してください。
現在のPDF資料に従って形成される環境ではZERO\_COPYは1に設定されるのでprv\_kii\_recv\_zero\_copy.cだけを追加してください。

同梱のパッチ(kii\_cloud\_demo.patch)を使用してCommand\_Lists.cを修正してください。

kii\_cloud\_demo\_setting.h内に対向サーバの設定などを記したマクロ定数が存在します。
実行環境に即して修正してください。

"プロジェクト"->"メイク"などでビルドしてエラーが無ければビルド成功となります。

### サンプルコードの実行

#### GT202上での起動とネットワーク設定

"プロジェクト"->"ダウンロードしてデバッグ"を行うと接続されているGT202へバイナリが送られ実行が開始されます。(main関数でブレークした状態になるので"実行"などでコンティニューを行ってください。)
ターミナル上に"shell>"と入力プロンプトが現れるので以下を参考にネットワークへの接続設定を行ってください。
 * アクセスポイントの設定
```
shell> wmiconfig --p <passphrase>
shell> wmiconfig --wpa <ver> <ucipher> <mcipher>
shell> wmiconfig --connect <ssid>
```
ターミナル上に"Connected"、"4 way handshake success"と表示されれば成功です。
 * IPの取得
```
shell> wmiconfig --ipdhcp
```
IP、Mask、Gatewayが表示されれば成功です。

#### GT202上での実行

基本的に"shell> kii \<command\>"で各サンプルは実行され、送受信した内容と結果のダンプが行われます。
commandには以下があります。

 * register

_vendorThingIDにUNIX時間の現在時刻(秒)、_passwordに"1234"を設定して作成されるthing_dataを指定しkii_thing_register APIを呼び出します。

 * new-object

object_dataに"{}"、object_content_typeにNULLを指定しkii_create_new_object APIを呼び出します。

 * new-object-with-id

object_idにOBJECT_NAMEマクロ定数値、object_dataに"{}"、object_content_typeにNULLを指定しkii_create_new_object_with_id APIを呼び出します。

 * patch-object

object_idにOBJECT_NAMEマクロ定数値、object_dataに"{}"、opt_etagにNULLを指定しkii_patch_object APIを呼び出します。

 * replace-object

object_idにOBJECT_NAMEマクロ定数値、object_dataに"{}"、opt_etagにNULLを指定しkii_replace_object APIを呼び出します。

 * get-object

object_idにOBJECT_NAMEマクロ定数値を指定しkii_get_object APIを呼び出します。

 * delete-object

object_idにOBJECT_NAMEマクロ定数値を指定しkii_delete_object APIを呼び出します。

 * subscribe-bucket

BUCKET_NAMEマクロ定義値で定義されるバケツを指定しkii_subscribe_bukcet APIを呼び出します。

 * unsubscribe-bucket

BUCKET_NAMEマクロ定義値で定義されるバケツを指定しkii_unsubscribe_bukcet APIを呼び出します。

 * create-topic

TOPIC_NAMEマクロ定義値で定義されるトピックを指定しkii_create_topic APIを呼び出します。

 * delete-topic

TOPIC_NAMEマクロ定義値で定義されるトピックを指定しkii_delete_topic APIを呼び出します。

 * subscribe-topic

TOPIC_NAMEマクロ定義値で定義されるトピックを指定しkii_subscribe_topic APIを呼び出します。

 * unsubscribe-topic

TOPIC_NAMEマクロ定義値で定義されるトピックを指定しkii_unsubscribe_topic APIを呼び出します。

 * install-push

developmentにKII_FALSEを指定しkii_install_thing_push APIを呼び出します。

 * get-endpoint

installation_idにINSTALLATION_IDマクロ定数値を指定しkii_get_mqtt_endpoint APIを呼び出します。

### 制限事項

現在のバージョンではhttpでの通信にしか対応していません。
故にKiiThingSDK対向サーバ側でhttpでの通信に対応していない場合は通信できません。
将来のアップデートでSSL通信周りの問題が解消されればhttpsでの通信に切り替えます。
